package practica02_carritocompra;

import com.google.gson.Gson;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import static practica02_carritocompra.Servidor.sendFileToServer;

public class Cliente extends javax.swing.JFrame {
    
    Socket socket = null;
    InputStream in = null;
    OutputStream out = null;
    
    public static void iniciaServidor(int puerto, int buffer) throws IOException{
        
        Gson gson= new Gson();
        String serializado = gson.toJson(invent);
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(puerto);
            System.out.println("Se ha iniciado el servidor...");
        } catch (IOException ex) {
            System.out.println("Error: "+ex);
        }

        Socket socket = null;
        InputStream in = null;
        OutputStream out = null;
        try {
            socket = serverSocket.accept();
            /*
            Aquí se crearía el nuevo socket
            */
        } catch (IOException ex) {
            System.out.println("No se pudo aceptar conexión: "+ex);
        }
        try {
            in = socket.getInputStream();
        } catch (IOException ex) {
            System.out.println("Error con socket In: " +ex);
        }
        try {
            out = new FileOutputStream("src\\objetos\\recieved.json");
        } catch (FileNotFoundException ex) {
            System.out.println("File not found. ");
        }
        byte[] bytes = new byte[buffer*1024];
        int count;
        int i=0;
        while ((count = in.read(bytes)) > 0) {
            out.write(bytes, 0, count);
            i++;
            System.out.println("linea "+i+". Cuenta servidor: "+count);
        }
        out.close();
        in.close();
        socket.close();
        FileInputStream fstream = new FileInputStream("src\\objetos\\recieved.json");
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        String line;
        while ((line = br.readLine()) != null) {
           per1= gson.fromJson(line,Persona.class);
           System.out.println(line);
           System.out.println(per1.toString());
        }
        serverSocket.close();
    }
    
    public File writeToFile(String pathFile, String toWrite) throws IOException{
        File file=new File( pathFile );
        FileWriter fw = new FileWriter(file);
        PrintWriter escribir = null;
        escribir = new PrintWriter(fw);
        escribir.write(toWrite);
        escribir.close();
        return file;
    }
    
    public boolean closeSocket() throws IOException{
        in.close();
        socket.close();
        return true;
    }
        
    public void sendFileToServer(String datos, String host, int puerto, int buffer) throws IOException  {
        int count;
        int a = 0;
        double progresoEnvio = 0;

        try{
            socket = new Socket(host, puerto);
        }catch(IOException ex){
            System.out.println("Conection failed: "+ ex);
        }
        
        File file = writeToFile("src\\objetos\\CtoS.json", datos);
        
        long length = file.length();
        byte[] bytes = new byte[buffer * 1024];
        try{
            in = new FileInputStream(file);
        }catch(FileNotFoundException ex){
            System.out.println("ERROR 404: "+ ex);
        }
        try{
            out = socket.getOutputStream();
        }catch(IOException ex){
            System.out.println("Exception Socket: "+ ex);
        }
        
        long acum = 0;
        while ((count = in.read(bytes)) > 0) {
            a++;
            acum += count;
            out.write(bytes, 0, count);
            progresoEnvio = (100 * acum) / length;
            System.out.println("Progreso: "+progresoEnvio);
        }
        out.close();        
    }

    /**
     * Creates new form Cliente
     */
    DefaultTableModel modelo = null;
    public Cliente() {
        initComponents();
        
        try {
            iniciaServidor(3060, 20);
        } catch (IOException ex) {
            System.out.println("Error en inicio de cliente: "+ex);
        }
        
        try {
            sendFileToServer(" ", "localhost", 3060, 20);
        } catch (IOException ex) {
            System.out.println("Excepción desde inicio: "+ex);
        }
        modelo = (DefaultTableModel) tablaDatos.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PRACTICA 02 Carrito de Compra");

        jLabel2.setText("Se hará la conexión y se mostrarán las existencias aquí abajo:");

        tablaDatos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SKU", "Nombre", "Existencias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaDatos);

        jButton1.setText("Ejemplo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        modelo.addRow(new Object[]{"1AF3F30", "Carrito", 5});
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaDatos;
    // End of variables declaration//GEN-END:variables
}
